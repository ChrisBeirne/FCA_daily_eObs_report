[["index.html", "Osa Conservation: Tracker Checker Part 1 Tracker status checker", " Osa Conservation: Tracker Checker Chris Beirne Part 1 Tracker status checker This document summarize the movement locations for all active collars within Osa Conservationâ€™s OC Vultures project. Last data request: 2023-02-01 15:15:36 The project currently contains 22 active tag deployments (defined as being active within the last 14 days). Time since last check-in animalName taxon_canonical_name country time_since_checkin_h Attenborough_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Carolina_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Charizard_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Fossey_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Frosty_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Goodall_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Rocky_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Ugalde_Sarcoramphus Sarcoramphus papa costa_rica 5.2 Elvis_Sarcoramphus Sarcoramphus papa costa_rica 5.3 Forsyth_Sarcoramphus Sarcoramphus papa costa_rica 5.3 Wencelas_Sarcoramphus Sarcoramphus papa costa_rica 5.3 Moskovits_Sarcoramphus Sarcoramphus papa costa_rica 7.2 Messi_Sarcoramphus Sarcoramphus papa costa_rica 29.2 Jatayu_Sarcoramphus Sarcoramphus papa costa_rica 29.3 Robin Hood_Sarcoramphus Sarcoramphus papa costa_rica 29.3 Wilson_Sarcoramphus Sarcoramphus papa costa_rica 31.3 Santa_Sarcoramphus Sarcoramphus papa costa_rica 53.2 OC1_Cathartes Cathartes melambrotus peru 5.2 OC3_Sarcoramphus Sarcoramphus papa peru 5.2 OC8_Cathartes Cathartes melambrotus peru 5.2 OC10_Cathartes Cathartes melambrotus peru 29.3 OC9_Sarcoramphus Sarcoramphus papa peru 77.3 Animals not seen for &gt;14 days animalName timestamp_end days_since_check_in 12 OC7_Sarcoramphus 2022-11-09 06:02:58 84.4 32 Carson_Sarcoramphus 2022-09-09 10:00:53 145.2 18 OC2_Cathartes 2022-09-05 10:00:20 149.2 1 OC6_Cathartes 2022-02-18 10:00:53 348.2 11 OC5_Sarcoramphus 2021-09-17 11:32:00 502.2 7 OC4_Sarcoramphus 2021-08-12 09:00:34 538.3 Tagging summary The proportion of active tags by country: And by species: Maps Last 14 days: Costa Rica We currently have 17 vultures transmitting data in Costa Rica: Daily schedule of the tags Peru We currently have 5 vultures transmitting data in Peru: Daily schedule of the tags: "],["last-48-hours.html", "Part 2 Last 48 Hours", " Part 2 Last 48 Hours The following maps relate to just the last 48 hours of data. Use this to find interesting clusters and their associated coordinates. 2.0.1 Costa Rica We currently have 17 vultures transmitting data in Costa Rica: 2.0.2 Peru We currently have 5 vultures transmitting data in Costa Rica: "],["cluster-detection.html", "Part 3 Cluster detection", " Part 3 Cluster detection The following map shows all of the clusters which have occurred in the previous 72 hours. This map should be checked daily to find potential feeding sites for visual confirmation. The field team should: Prioritize recent clusters - we are more likely to find a carcass if a vulture was feeding recently Prioritize accessible clusters - not all of these clusters will be accessible, you should figure out which would be the easiest to visit Prioritise clusters with multipke individuals - if more than one individual has visited a cluster, this could suggest a large feeding event Key: - Colored circles denote clusters of &gt; than 1 hour duration, where the vultures have low distances travelled - The colors denote how recently the cluster started (Red &gt;24 hours; orange 24-48 hours; blue 48-72 hours) - Hover over the circle for gps coordinates, cluster radius, number of points in the cluster and duration of the event "],["costa-rica-1.html", "3.1 Costa Rica", " 3.1 Costa Rica # Code derived from # https://github.com/movestore/Daily-Rest-Sites #library(&#39;maptools&#39;) #library(&#39;ggmap&#39;) # Covert timezone mov_dat$timestamp &lt;- with_tz(timestamps(mov_dat), tz=&quot;America/Costa_Rica&quot;) # Subset to costa rica sub_dat &lt;- mov_dat[mov_dat$location_lat&gt;0,] # Just pull last 3 days start_t2 &lt;- t-as.difftime(3,units=&#39;days&#39;) sub_dat &lt;- sub_dat[sub_dat$timestamp&gt;start_t2,] sub_dat$speed &lt;- unlist(lapply(speed(sub_dat),c, NA )) sub_dat_df &lt;- as.data.frame(sub_dat) sub_dat_df &lt;- left_join(sub_dat_df, animals[, c(&quot;tag_id&quot;, &quot;animalName&quot;)]) ## Joining with `by = join_by(tag_id)` sub_dat_df &lt;- sub_dat_df[order(sub_dat_df$animalName),] lfc &lt;- do.call(st_sfc, lapply(split(sub_dat_df, sub_dat_df$animalName), function(d){st_linestring(as.matrix(d[,c(&quot;location_long&quot;, &quot;location_lat&quot;)]))})) dat_shp &lt;- st_sf(data.frame(animalName=levels(factor(sub_dat_df[,&quot;animalName&quot;])), geom=lfc)) #plot(st_geometry(dat_shp)) # #plot(dat$location_long[dat$country==&quot;costa_rica&quot;], dat$location_lat[dat$country==&quot;costa_rica&quot;]) #plot(st_geometry(dat_shp), add=T) # add back in the metadata dat_shp &lt;- left_join(dat_shp,sp_dat) ## Joining with `by = join_by(animalName)` # Bring in the colours from earlier cr_cols &lt;- tmp_cr[, c(&quot;animalName&quot;, &quot;colours&quot;)] cr_cols &lt;- cr_cols[duplicated(cr_cols)==F,] dat_shp &lt;- left_join(dat_shp, cr_cols) ## Joining with `by = join_by(animalName)` # Make shapefile of the tracks to add later #plot(sub_dat_df$ground_speed, sub_dat_df$speed) #plot(sub_dat_df$ground_speed, sub_dat_df$height_above_ellipsoid) #plot(sub_dat, col=as.numeric(sub_dat$ground_speed&lt;1)+1) #plot(sub_dat[sub_dat$ground_speed&lt;1,], add=T) # Specifiy the settings data=sub_dat window=&quot;all&quot; upX=0 downX=0 speedvar=&quot;speed&quot; maxspeed=0.2 duration=1.2 radius=50 #rFunction &lt;- function(data, window=&quot;all&quot;, upX=0, downX=0, speedvar=&quot;speed&quot;, maxspeed=NULL, duration=NULL, radius=NULL) #{ Sys.setenv(tz=&quot;America/Costa_Rica&quot;) names(data) &lt;- make.names(names(data),allow_=FALSE) # add species info data.df &lt;- as.data.frame(data) names(data.df) &lt;- make.names(names(data.df),allow_=FALSE) if (any(names(data.df)==&quot;individual.taxon.canonical.name&quot;)) data@data$species &lt;- data.df$individual.taxon.canonical.name if (any(names(data.df)==&quot;taxon.canonical.name&quot;)) data@data$species &lt;- data.df$taxon.canonical.name speedx &lt;- function(x) #input move object { N &lt;- length(x) distVincentyEllipsoid(coordinates(x))/as.numeric(difftime(timestamps(x)[-1],timestamps(x)[-N],units=&quot;secs&quot;)) } n.all &lt;- length(timestamps(data)) data &lt;- data[!duplicated(paste0(round_date(timestamps(data), &quot;5 mins&quot;), trackId(data))),] data.split &lt;- move::split(data) data.ground &lt;- foreach(datai = data.split) %do% { if (speedvar==&quot;speed&quot;) { if (length(datai)&gt;1) #cannot calculated between-loc speed if only one location, therefore keep { ix &lt;- which(speedx(datai)&lt;maxspeed) res &lt;- datai[sort(unique(c(ix,ix+1))),]#this uses the speed between positions } else { # logger.info(&quot;One of your tracks contains only one location, so between-location speed cannot be calculated. The location is kept in the data set, but might corrupt the results.&quot;) res &lt;- datai } } else if (speedvar %in% names(datai)) { res &lt;- datai[datai@data[,speedvar]&lt;maxspeed | is.na(datai@data[,speedvar]),] # this allows also NA speed to be selected # logger.info(&quot;Your speed variable contains NA, these are kept in the data set of rest positions.&quot;) } else { # logger.info(&quot;You have not selected a viable speed variable. Therefore the fallback between location speed is calculated.&quot;) if (length(datai)&gt;1) { ix &lt;- which(speedx(datai)&lt;maxspeed) res &lt;- datai[sort(unique(c(ix,ix+1))),]#this uses the speed between positions } else { # logger.info(&quot;One of your tracks contains only one location, so between-location speed cannot be calculated. The location is kept in the data set, but might corrupt the results.&quot;) res &lt;- datai } } res } names(data.ground) &lt;- names(data.split) data.ground &lt;- moveStack(data.ground[unlist(lapply(data.ground, length) &gt; 0)]) # select night or day positions (use data.ground, call it &quot;night&quot;) data.ground.split &lt;- move::split(data.ground) data.night &lt;- foreach(data.groundi = data.ground.split) %do% { #print(namesIndiv(data.groundi)) sunupx &lt;- data.frame(sunriset(coordinates(data.groundi), timestamps(data.groundi), direction=&quot;sunrise&quot;, POSIXct.out=TRUE))$time + upX*60 sundownx &lt;- data.frame(sunriset(coordinates(data.groundi), timestamps(data.groundi), direction=&quot;sunset&quot;, POSIXct.out=TRUE))$time + downX*60 data.groundi@data &lt;- cbind(data.groundi@data,sunupx,sundownx) # there are no sunup or sundown during Arctic summer, then only day positions possible &quot;sunupdown&quot;. respectively for Arctic winter ix &lt;- which(is.na(sunupx) | is.na(sundownx)) ix_ArcSum &lt;- ix[coordinates(data.groundi)[ix,2]&gt;50 &amp; as.POSIXlt(timestamps(data.groundi[ix,]))$mon %in% c(4:8)] ix_ArcWin &lt;- ix[coordinates(data.groundi)[ix,2]&gt;50 &amp; as.POSIXlt(timestamps(data.groundi[ix,]))$mon %in% c(10:11,0:2)] ix_AntWin &lt;- ix[coordinates(data.groundi)[ix,2]&lt;(-50) &amp; as.POSIXlt(timestamps(data.groundi[ix,]))$mon %in% c(4:8)] ix_AntSum &lt;- ix[coordinates(data.groundi)[ix,2]&lt;(-50) &amp; as.POSIXlt(timestamps(data.groundi[ix,]))$mon %in% c(10:11,0:2)] if (window==&quot;all&quot;) { data.nighti &lt;- data.groundi year &lt;- as.POSIXlt(timestamps(data.nighti))$year+1900 yday &lt;- as.POSIXlt(timestamps(data.nighti))$yday data.nighti@data &lt;- cbind(data.nighti@data,year,yday) } else { if (window==&quot;sundownup&quot;) #night roosts { if (length(ix_ArcSum)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions above the Arctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_ArcSum),&quot; northern summer positions without &#39;night&#39; (May-Sep) are taken out for the calculations.&quot;)) data.groundi &lt;- data.groundi[-ix_ArcSum,] } if (length(ix_AntSum)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions below the Antarctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_AntSum),&quot; southern summer positions without &#39;night&#39; (Nov-Mar) are taken out for the calculations.&quot;)) data.groundi &lt;- data.groundi[-ix_AntSum,] } if (length(ix_ArcWin)&gt;0 &amp; length(ix_AntWin)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions above the Arctic circle and below the Antarctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_ArcWin),&quot; northern winter positions without &#39;day&#39; (Nov-Mar) and&quot;, length(ix_AntWin), &quot; southern winter positions without &#39;day&#39; (May-Sep) are kept in the data fully.&quot;)) data.groundi.ND &lt;- data.groundi[-c(ix_ArcWin,ix_AntWin),] ix.ND &lt;- seq(along=data.groundi)[-c(ix_ArcWin,ix_AntWin)] selND &lt;- which(timestamps(data.groundi.ND)&lt;=data.groundi.ND$sunupx | timestamps(data.groundi.ND)&gt;=data.groundi.ND$sundownx) data.nighti &lt;- data.groundi[sort(c(ix.ND[selND],ix_ArcWin,ix_AntWin)),] } else if (length(ix_ArcWin)&gt;0 &amp; length(ix_AntWin)==0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions above the Arctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_ArcWin),&quot; northern winter positions without &#39;day&#39; (Nov-Mar) are kept in the data fully.&quot;)) data.groundi.ND &lt;- data.groundi[-c(ix_ArcWin),] ix.ND &lt;- seq(along=data.groundi)[-c(ix_ArcWin)] selND &lt;- which(timestamps(data.groundi.ND)&lt;=data.groundi.ND$sunupx | timestamps(data.groundi.ND)&gt;=data.groundi.ND$sundownx) data.nighti &lt;- data.groundi[sort(c(ix.ND[selND],ix_ArcWin)),] } else if (length(ix_ArcWin)==0 &amp; length(ix_AntWin)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions below the Antarctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_AntWin),&quot; southern winter positions without &#39;day&#39; (May-Sep) are kept in the data fully.&quot;)) data.groundi.ND &lt;- data.groundi[-c(ix_AntWin),] ix.ND &lt;- seq(along=data.groundi)[-c(ix_AntWin)] selND &lt;- which(timestamps(data.groundi.ND)&lt;=data.groundi.ND$sunupx | timestamps(data.groundi.ND)&gt;=data.groundi.ND$sundownx) data.nighti &lt;- data.groundi[sort(c(ix.ND[selND],ix_AntWin)),] } else data.nighti &lt;- data.groundi[timestamps(data.groundi)&lt;=data.groundi$sunupx | timestamps(data.groundi)&gt;=data.groundi$sundownx,] year &lt;- as.POSIXlt(timestamps(data.nighti))$year+1900 yday &lt;- as.POSIXlt(timestamps(data.nighti))$yday ynight &lt;- yday ixx &lt;- which(is.na(data.nighti$sundownx)) if (length(ixx)&gt;0) { ynight[timestamps(data.nighti[-ixx])&gt;data.nighti$sundownx[-ixx]] &lt;- ynight[timestamps(data.nighti[-ixx])&gt;data.nighti$sundownx[-ixx]]+1 # for Arctic/Antarctic nights the night goes from midday to midday, which depends on the location.. midday_ixx &lt;- solarnoon(coordinates(data.nighti[ixx]),timestamps(data.nighti[ixx]),POSIXct.out=TRUE)$time ynight[timestamps(data.nighti[ixx])&gt;midday_ixx] &lt;- ynight[timestamps(data.nighti[ixx])&gt;midday_ixx]+1 } else ynight[timestamps(data.nighti)&gt;data.nighti$sundownx] &lt;- ynight[timestamps(data.nighti)&gt;data.nighti$sundownx]+1 # adapt for New Year&#39;s Eve year[as.POSIXlt(timestamps(data.nighti))$mday==31 &amp; as.POSIXlt(timestamps(data.nighti))$mon==11 &amp; timestamps(data.nighti)&gt;data.nighti$sundownx] &lt;- year[as.POSIXlt(timestamps(data.nighti))$mday==31 &amp; as.POSIXlt(timestamps(data.nighti))$mon==11 &amp; timestamps(data.nighti)&gt;data.nighti$sundownx]+1 ynight[as.POSIXlt(timestamps(data.nighti))$mday==31 &amp; as.POSIXlt(timestamps(data.nighti))$mon==11 &amp; timestamps(data.nighti)&gt;data.nighti$sundownx] &lt;- 0 data.nighti@data &lt;- cbind(data.nighti@data,year,yday,ynight) } if (window==&quot;sunupdown&quot;) # day rests { if (length(ix_ArcWin)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions above the Arctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_ArcWin),&quot; northern winter positions without &#39;day&#39; (Nov-Mar) are taken out for the calculations.&quot;)) data.groundi &lt;- data.groundi[-ix_ArcWin,] } if (length(ix_AntWin)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions below the Antarctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_AntWin),&quot; southern winter positions without &#39;day&#39; (May-Sep) are taken out for the calculations.&quot;)) data.groundi &lt;- data.groundi[-ix_AntWin,] } if (length(ix_ArcSum)&gt;0 &amp; length(ix_AntSum)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions above the Arctic circle and below the Antarctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_ArcSum),&quot; northern summer positions without &#39;night&#39; (May-Sep) and&quot;, length(ix_AntSum), &quot; southern summer positions without &#39;night&#39; (Nov-Mar) are kept in the data fully.&quot;)) data.groundi.ND &lt;- data.groundi[-c(ix_ArcSum,ix_AntSum),] ix.ND &lt;- seq(along=data.groundi)[-c(ix_ArcSum,ix_AntSum)] selND &lt;- which(timestamps(data.groundi.ND)&gt;=data.groundi.ND$sunupx &amp; timestamps(data.groundi.ND)&lt;=data.groundi.ND$sundownx) data.nighti &lt;- data.groundi[sort(c(ix.ND[selND],ix_ArcSum,ix_AntSum)),] } else if (length(ix_ArcSum)&gt;0 &amp; length(ix_AntSum)==0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions above the Arctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_ArcSum),&quot; northern summer positions without &#39;night&#39; (May-Sep) are kept in the data fully.&quot;)) data.groundi.ND &lt;- data.groundi[-c(ix_ArcSum),] ix.ND &lt;- seq(along=data.groundi)[-c(ix_ArcSum)] selND &lt;- which(timestamps(data.groundi.ND)&gt;=data.groundi.ND$sunupx &amp; timestamps(data.groundi.ND)&lt;=data.groundi.ND$sundownx) data.nighti &lt;- data.groundi[sort(c(ix.ND[selND],ix_ArcSum)),] } else if (length(ix_ArcSum)==0 &amp; length(ix_AntSum)&gt;0) { # logger.info(paste0(&quot;The data set of individual &quot;,namesIndiv(data.groundi),&quot; includes positions below the Antarctic circle, so there are no sunup or sundown events during some time of the year. The relevant &quot;,length(ix_AntSum),&quot; southern summer positions without &#39;night&#39; (Nov-Mar) are kept in the data fully.&quot;)) data.groundi.ND &lt;- data.groundi[-c(ix_AntSum),] ix.ND &lt;- seq(along=data.groundi)[-c(ix_AntSum)] selND &lt;- which(timestamps(data.groundi.ND)&gt;=data.groundi.ND$sunupx &amp; timestamps(data.groundi.ND)&lt;=data.groundi.ND$sundownx) data.nighti &lt;- data.groundi[sort(c(ix.ND[selND],ix_AntSum)),] } else data.nighti &lt;- data.groundi[timestamps(data.groundi)&gt;=data.groundi$sunupx &amp; timestamps(data.groundi)&lt;=data.groundi$sundownx,] year &lt;- as.POSIXlt(timestamps(data.nighti))$year+1900 yday &lt;- as.POSIXlt(timestamps(data.nighti))$yday data.nighti@data &lt;- cbind(data.nighti@data,year,yday) } } return(data.nighti) } if (is(data.night,&#39;Move&#39;)) data.night &lt;- moveStack(data.night,forceTz=&quot;UTC&quot;) #force to movestack names (data.night) &lt;- names(data.ground.split) data.night.nozero &lt;- data.night[unlist(lapply(data.night, length) &gt; 0)] if (length(data.night.nozero)==0) #number of list elements { # logger.info(&quot;Your data contain no night/day positions. No csv overview saved. Return NULL.&quot;) result &lt;- NULL } else { data.night &lt;- moveStack(data.night.nozero) data.night.df &lt;- as.data.frame(data.night) nacolx &lt;- which(apply(data.night.df,2,function (x) all(is.na(x)))) if (length(nacolx)&gt;0) data.night.df.nna &lt;- data.night.df[,-nacolx] else data.night.df.nna &lt;- data.night.df #remove columns with all NA #write.csv(data.night.df.nna,file = paste0(&quot;data_rest_selectedTime.csv&quot;),row.names=FALSE) #csv artefakt of all ground and night (or day...) positions #write.csv(data.night.df.nna,file = &quot;data_rest_selectedTime.csv&quot;,row.names=FALSE) #csv artefakt of all ground and night (or day...) positions # save all rest positions if is rest by given definition (radius, duration), goes backwards for last night/day rest data.night.split &lt;- move::split(data.night) if (window==&quot;all&quot;) { prop.rest.df &lt;- data.frame(&quot;local.identifier&quot;=character(),&quot;species&quot;=character(),&quot;year&quot;=numeric(),&quot;yday&quot;=numeric(),&quot;timestamp.first&quot;=character(),&quot;timestamp.last&quot;=character(),&quot;rest.mean.long&quot;=numeric(),&quot;rest.mean.lat&quot;=numeric(),&quot;rest.nposi&quot;=numeric(),&quot;rest.duration&quot;=numeric(),&quot;rest.radius&quot;=numeric()) } else { if (window==&quot;sundownup&quot;) prop.rest.df &lt;- data.frame(&quot;local.identifier&quot;=character(),&quot;species&quot;=character(),&quot;year&quot;=numeric(),&quot;ynight&quot;=numeric(),&quot;timestamp.first&quot;=character(),&quot;timestamp.last&quot;=character(),&quot;rest.mean.long&quot;=numeric(),&quot;rest.mean.lat&quot;=numeric(),&quot;rest.nposi&quot;=numeric(),&quot;rest.duration&quot;=numeric(),&quot;rest.radius&quot;=numeric()) if (window==&quot;sunupdown&quot;) prop.rest.df &lt;- data.frame(&quot;local.identifier&quot;=character(),&quot;species&quot;=character(),&quot;year&quot;=numeric(),&quot;yday&quot;=numeric(),&quot;timestamp.first&quot;=character(),&quot;timestamp.last&quot;=character(),&quot;rest.mean.long&quot;=numeric(),&quot;rest.mean.lat&quot;=numeric(),&quot;rest.nposi&quot;=numeric(),&quot;rest.duration&quot;=numeric(),&quot;rest.radius&quot;=numeric()) } data.rest &lt;- foreach(data.nighti = data.night.split) %do% { # logger.info(paste(&quot;Extracting rest sites of&quot;,namesIndiv(data.nighti))) data.resti.df &lt;- data.frame(as.data.frame(moveStack(data.nighti)),coordinates(data.nighti))[0,] #empty df to fill, moveStack to keep trackId Nresti &lt;- dim(data.resti.df)[2] names(data.resti.df)[(Nresti-1):Nresti] &lt;- c(&quot;location.long&quot;,&quot;location.lat&quot;) year &lt;- unique(data.nighti@data$year) for (k in seq(along=year)) { data.nightik &lt;- data.nighti[data.nighti@data$year==year[k],] if (window==&quot;all&quot;) { night &lt;- unique(data.nightik@data$yday) } else { if (window==&quot;sundownup&quot;) night &lt;- unique(data.nightik@data$ynight) if (window==&quot;sunupdown&quot;) night &lt;- unique(data.nightik@data$yday) } for (j in seq(along=night)) { if (window==&quot;all&quot;) { data.nightikj &lt;- data.nightik[data.nightik@data$yday==night[j],] } else { if (window==&quot;sundownup&quot;) data.nightikj &lt;- data.nightik[data.nightik@data$ynight==night[j],] if (window==&quot;sunupdown&quot;) data.nightikj &lt;- data.nightik[data.nightik@data$yday==night[j],] } last &lt;- Nikj &lt;- length(data.nightikj) while (last&gt;1) # as long as first night/day position is not the last { data.nightikj &lt;- data.nightikj[1:last,] backdt &lt;- as.numeric(difftime(timestamps(data.nightikj)[last],timestamps(data.nightikj)[-c(last:Nikj)],units=&quot;hours&quot;)) if (length(backdt)&gt;=1) #changed this to allow for further away position (if in radius assume not moved), allows for worse resolution data { # note that here not yet checked that duration in site complete, later if (any(backdt&lt;=duration)) { data.sel &lt;- data.nightikj[c(which(backdt&lt;=duration),last),] data.rem &lt;- data.nightikj[-c(which(backdt&lt;=duration),last),] } else { data.sel &lt;- data.nightikj[(last-1):last,] data.rem &lt;- data.nightikj[-c((last-1):last),] } m &lt;- colMeans(coordinates(data.sel)) dp0 &lt;- distVincentyEllipsoid(m,coordinates(data.sel)) p0 &lt;- coordinates(data.sel)[min(which(dp0==max(dp0))),] dp1 &lt;- distVincentyEllipsoid(p0,coordinates(data.sel)) p1 &lt;- coordinates(data.sel)[min(which(dp1==max(dp1))),] maxdist &lt;- distVincentyEllipsoid(p0,p1) if (maxdist&lt;radius) { ## check if already longer at this rest site mid &lt;- midPoint(p0,p1) data.bef &lt;- data.rem if (length(data.bef)&gt;=1) { dist.bef &lt;- distVincentyEllipsoid(mid,coordinates(data.bef)) if (any(dist.bef&gt;radius)) { data.selx &lt;- data.nightikj[c(which(backdt&gt;duration)[-(1:max(which(dist.bef&gt;radius)))],which(backdt&lt;=duration),last),] data.remx &lt;- data.nightikj[-c(which(backdt&gt;duration)[-(1:max(which(dist.bef&gt;radius)))],which(backdt&lt;=duration),last),] } else { data.selx &lt;- data.nightikj[c(which(backdt&gt;duration),which(backdt&lt;=duration),last),] data.remx &lt;- data.nightikj[-c(which(backdt&gt;duration),which(backdt&lt;=duration),last),] } } else { data.selx &lt;- data.sel data.remx &lt;- data.rem } data.selx.df &lt;- data.frame(as.data.frame(moveStack(data.selx)),coordinates(data.selx)) Nselx &lt;- dim(data.selx.df)[2] names(data.selx.df)[(Nselx-1):Nselx] &lt;- c(&quot;location.long&quot;,&quot;location.lat&quot;) time0 &lt;- min(timestamps(data.selx)) timeE &lt;- max(timestamps(data.selx)) durx &lt;- as.numeric(difftime(timeE,time0,unit=&quot;hour&quot;)) radx &lt;- max(distVincentyEllipsoid(mid,coordinates(data.selx))) if (durx&gt;=duration &amp; radx&lt;=radius) #added this condition to only save rest sites of given duration (if this condition is left out also rest site with shorter duration are given back) { data.resti.df &lt;- rbind(data.resti.df,data.selx.df) if (window==&quot;all&quot;) { prop.rest.df &lt;- rbind(prop.rest.df,data.frame(&quot;local.identifier&quot;=namesIndiv(data.selx),&quot;species&quot;=data.selx.df$species,&quot;year&quot;=data.selx.df$year[1],&quot;yday&quot;=data.selx.df$yday[1],&quot;timestamp.first&quot;=as.character(time0),&quot;timestamp.last&quot;=as.character(timeE),&quot;rest.mean.long&quot;=mid[1,1],&quot;rest.mean.lat&quot;=mid[1,2],&quot;rest.nposi&quot;=length(data.selx),&quot;rest.duration&quot;=durx,&quot;rest.radius&quot;=radx)) } else { if (window==&quot;sundownup&quot;) prop.rest.df &lt;- rbind(prop.rest.df,data.frame(&quot;local.identifier&quot;=namesIndiv(data.selx),&quot;species&quot;=data.selx.df$species[1],&quot;year&quot;=data.selx.df$year[1],&quot;ynight&quot;=data.selx.df$ynight[1],&quot;timestamp.first&quot;=as.character(time0),&quot;timestamp.last&quot;=as.character(timeE),&quot;rest.mean.long&quot;=mid[1,1],&quot;rest.mean.lat&quot;=mid[1,2],&quot;rest.nposi&quot;=length(data.selx),&quot;rest.duration&quot;=durx,&quot;rest.radius&quot;=radx)) if (window==&quot;sunupdown&quot;) prop.rest.df &lt;- rbind(prop.rest.df,data.frame(&quot;local.identifier&quot;=namesIndiv(data.selx),&quot;species&quot;=data.selx.df$species[1],&quot;year&quot;=data.selx.df$year[1],&quot;yday&quot;=data.selx.df$yday[1],&quot;timestamp.first&quot;=as.character(time0),&quot;timestamp.last&quot;=as.character(timeE),&quot;rest.mean.long&quot;=mid[1,1],&quot;rest.mean.lat&quot;=mid[1,2],&quot;rest.nposi&quot;=length(data.selx),&quot;rest.duration&quot;=durx,&quot;rest.radius&quot;=radx)) } } #A) if only need one, i.e. the last, rest site per day/night #break #B) if need all rest sites (irregardless if previous rest site was saved, check for another one in the remaining data) data.nightikj &lt;- data.remx last &lt;- Nikj &lt;- length(data.nightikj) #this can be zero, will be stop indication in while() condition } else last &lt;- last-1 #shift one time step } else last &lt;- last-1 # shift one time step also if not enough data in previous Xh time frame } #while } #for j } #for k if (dim(data.resti.df)[1]&gt;0) { o &lt;- order(data.resti.df$timestamp) data.resti &lt;- move(x=data.resti.df$location.long[o],y=data.resti.df$location.lat[o],time=as.POSIXct(data.resti.df$timestamp[o]),data=data.resti.df[o,],sensor=data.resti.df$sensor[o],animal=data.resti.df$trackId[o]) } else data.resti &lt;- NULL } names(data.rest) &lt;- names(data.night.split) data.rest.nozero &lt;- data.rest[unlist(lapply(data.rest, length) &gt; 0)] #remove IDs with no data if (length(data.rest.nozero)==0) { # logger.info(&quot;Your output file contains no positions. No csv overview and plot saved. Return NULL.&quot;) result &lt;- NULL } else { result &lt;- moveStack(data.rest.nozero) #write.csv(prop.rest.df,file = paste0(&quot;rest_overview.csv&quot;),row.names=FALSE) #csv artefakt #write.csv(prop.rest.df,file = &quot;rest_overview.csv&quot;,row.names=FALSE) #map &lt;- get_map(bbox(extent(data)),source=&quot;stamen&quot;,force=TRUE) #data.df &lt;- data.frame(coordinates(data),as.data.frame(moveStack(data))) #names(data.df)[1:2] &lt;- c(&quot;location.long0&quot;,&quot;location.lat0&quot;) #out &lt;- ggmap(map) + # geom_path(data=data.df,aes(x=location.long0,y=location.lat0,group=trackId),colour=&quot;blue&quot;) + # geom_point(data=prop.rest.df,aes(x=rest.mean.long,y=rest.mean.lat),colour=&quot;red&quot;,size=3) #ggsave(out, file = paste0(&quot;rest_sites_onTracks.pdf&quot;)) # note that all timestamps are UTC! } } ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded ## Warning in data.frame(local.identifier = namesIndiv(data.selx), species = ## data.selx.df$species, : row names were found from a short variable and have ## been discarded #} #return(result) clus_res &lt;- prop.rest.df[duplicated(prop.rest.df)==F,] # Add a colour colum clus_age &lt;- t-ymd_hms(clus_res$timestamp.last) clus_res$col &lt;- NA clus_res$col[clus_age&lt;24] &lt;- &quot;red&quot; clus_res$col[clus_age&gt;24 &amp; clus_age&lt;48] &lt;- &quot;orange&quot; clus_res$col[clus_age&gt;48] &lt;- &quot;blue&quot; # # Leaflet the data and add the output # cols &lt;- c(&quot;red&quot;, &quot;blue&quot;) # # m &lt;- leaflet() %&gt;% # # Add a satellite image layer # addProviderTiles(providers$OpenStreetMap.Mapnik) #%&gt;% # # m &lt;- m %&gt;% # addCircleMarkers(lng=sub_dat_df$location_long, # lat=sub_dat_df$location_lat, # popup=paste(sub_dat_df$timestamp), # fillOpacity = 0.3, opacity = 0.5, radius=2, color=cols[as.numeric(sub_dat$ground_speed&lt;1)+1]) # # m &lt;- leaflet() %&gt;% # # Add a satellite image layer # addProviderTiles(providers$OpenStreetMap.Mapnik) #%&gt;% # # m &lt;- m %&gt;% # addCircleMarkers(lng=sub_dat_df$location_long, # lat=sub_dat_df$location_lat, # popup=paste(sub_dat_df$timestamp), # fillOpacity = 0.3, opacity = 0.5, radius=2, color=cols[as.numeric(sub_dat_df$speed&lt;0.1)+1]) # # m # # # m &lt;- m %&gt;% # addCircleMarkers(lng=tmp$rest.mean.long, # lat=tmp$rest.mean.lat, # popup=paste(&quot;duration =&quot;,tmp$rest.duration, &quot;npos =&quot;,tmp$rest.nposi), # fillOpacity = 0.3, opacity = 0.7, radius=4, color=&quot;orange&quot;) # # m m &lt;- leaflet() %&gt;% # Add a satellite image layer addProviderTiles(providers$Stamen.TonerLite, group=&quot;Simple&quot;) %&gt;% addProviderTiles(providers$Esri.WorldImagery, group=&quot;Satellite&quot;) %&gt;% addProviderTiles(providers$OpenStreetMap.Mapnik, group=&quot;OS&quot;) #%&gt;% m &lt;- m %&gt;% addPolylines(data = dat_shp, color = dat_shp$colours, weight=3,opacity=0.3, popup=dat_shp$animalName) %&gt;% addCircleMarkers(lng=clus_res$rest.mean.long, lat=clus_res$rest.mean.lat, popup=paste(&quot;name&quot;=clus_res$local.identifier, &quot;&lt;br&gt;duration =&quot;,round(clus_res$rest.duration,1), &quot;h&quot;, &quot;&lt;br&gt;npos =&quot;,clus_res$rest.nposi, &quot; Radius =&quot; ,round(clus_res$rest.radius,1),&quot;m&quot;, &quot;&lt;br&gt;lon =&quot; ,round(clus_res$rest.mean.lon,6) , &quot;lat =&quot;, round(clus_res$rest.mean.lat,6)) , fillOpacity = 0.3, opacity = 0.7, radius=4, color=clus_res$col)%&gt;% addScaleBar(position=&quot;topleft&quot;, options=scaleBarOptions(maxWidth = 100, metric = TRUE, imperial = FALSE, updateWhenIdle = TRUE)) %&gt;% addLayersControl( baseGroups = c(&quot;OS&quot;, &quot;Simple&quot;, &quot;Satellite&quot;), options = layersControlOptions(collapsed = FALSE) ) %&gt;% addLegend(position=&quot;topright&quot;, labels=c(&quot;&lt;24&quot;, &quot;24-48&quot;, &quot;48+&quot;), colors=c(&quot;red&quot;,&quot;orange&quot;,&quot;blue&quot;), title=&quot;Cluster age&quot;) m # Also include night&#39;time sleep locations? Would that be useful? # Cluster map # - Nighttime locations # - Last 72 hours - can we colour code --&gt; based on recent locations # - Work flow # Open cluster tab # Identify accessible clusters # Gps points # Size of the spread # Make sure # Cheris look at master protocol --&gt; "],["hardware-function-and-settings.html", "Part 4 Hardware function and settings", " Part 4 Hardware function and settings The following plots track how the tags are performing in the field. 4.0.1 Battery status Average battery level (last 14 days): 4.0.2 Location accuracy Average horizontal location accuracy (last 14 days): 4.0.3 Reporting frequencies Average number of locations per day (last 14 days): 4.0.4 Temporal activity Location activity over the last 14 days The plot below shows a point each time we have a location at a given time. Location activity over the last 14 days The plot below shows a point each time we have a location at a given time. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
